name: Production Pull Request Planner

on:
  workflow_dispatch:        # Allow manual triggering
  pull_request:
    types: [opened, synchronize, reopened, edited] 
    branches:
      - main
    paths:
      - terraform/live/production/**
    
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID_PRODUCTION }}

jobs:
  lint:
    name: TFLint Inspection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init
        working-directory: terraform/live/production
      
      - name: Run TFLint
        run: tflint
        working-directory: terraform/live/production
        
      - name: Run TFLint for All Modules
        run: |
          find modules -type f -name "main.tf" -exec dirname {} \; | sort -u | while read dir; do
            echo "Running TFLint in $dir"
            if [ -f "$dir/.tflint.hcl" ]; then
              tflint --config "$dir/.tflint.hcl" --chdir "$dir"
            else
              tflint --chdir "$dir"
            fi
          done
        working-directory: terraform
  
  plan_changes:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: lint  # Run only after the lint job succeeds
    env:
      TF_IN_AUTOMATION: "true"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/gha-terraform-prod
          role-session-name: terraform-plan
          aws-region: us-east-1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
          
      - name: Terraform Init
        id: init
        run: |
          terraform init -input=false
        working-directory: terraform/live/production/
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out ./tf.plan
        working-directory: terraform/live/production/
        continue-on-error: true

      - name: Terraform Show
        id: show
        run: terraform show -no-color ./tf.plan 2>&1 > /tmp/plan.txt
        working-directory: terraform/live/production/
      
      - name: Format Terraform plan
        id: format
        working-directory: terraform/live/production/
        run: |
          content=""
          raw_plan=$(cat /tmp/plan.txt | sed -e '/./,$!d' -e :a -e '/^\n*$/{$d;N;ba' -e '}') # Trim leading and trailing empty lines
          raw_plan=$(echo "${raw_plan}" | sed -r 's/^([[:blank:]]*)([-+~])/\2\1/g')         # Move any diff characters to start of line
          raw_plan=$(echo "${raw_plan}" | sed -r 's/^~/!/g')                                  # replace telda to show color on change
          summary=$(echo "${raw_plan}" | grep -E "^Plan\:.+$" | tail -n 1)                 # Extract Plan: line from diff summary (may not be present)
          content+="${summary}\n\n"
          # shellcheck disable=SC2119
          content+="<details><summary><strong>Details</strong></summary>\n\n\`\`\`diff\n${raw_plan}\n\`\`\`\n</details>"
          echo "${content}" | awk '{gsub(/\\n/,"\n")}1' > /tmp/final.md

      - name: Comment Terraform Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/final.md", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### Terraform Plan Part # ${i + 1}
              #### Terraform Format and Style 🖌\`skipped\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              #### Terraform Validate 🤖\`${{ steps.validate.outcome }}\`

              ${plans[i]}

              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform/live/production/\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
