#https://karpenter.sh/docs/getting-started/getting-started-with-karpenter/

apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: recovery
spec:
  template:
    metadata:
      # Labels are arbitrary key-values that are applied to all nodes
      labels:
        recovery: "true"
        Purpose: "general-workloads"

      # Annotations are arbitrary key-values that are applied to all nodes
      # annotations:
        # application-type: recovery
    spec:
      requirements:
        - key: "karpenter.k8s.aws/instance-category"
          operator: In
          values: ["m" , "c", "t", "r"]
          # minValues here enforces the scheduler to consider at least that number of unique instance-category to schedule the pods.
          # This field is ALPHA and can be dropped or replaced at any time
          # minValues: 2
        # - key: "karpenter.k8s.aws/instance-family"
          # operator: In
          # values: ["m5","m5d","c5","c5d","c4","r4"]
          # minValues: 5
        - key: "karpenter.k8s.aws/instance-cpu"
          operator: In
          values: ["4"]
        # - key: "karpenter.k8s.aws/instance-hypervisor"
          # operator: In
          # values: ["nitro"]
        - key: "karpenter.k8s.aws/instance-generation"
          operator: Gt
          values: ["2"]
        - key: "topology.kubernetes.io/zone"
          operator: In
          values: ["use-east-1a", "use-east-1b", "use-east-1c"]
        # - key: "kubernetes.io/arch"
          # operator: In
          # values: ["arm64", "amd64"]
        - key: "karpenter.sh/capacity-type"
          operator: In
          values: ["spot", "on-demand"] # "spot", "on-demand", "reserved"
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: recovery
      taints:
        - key: recovery
          value: "true"
          effect: NoSchedule

      expireAfter: 720h # 30 * 24h = 720h

  # Disruption section which describes the ways in which Karpenter can disrupt and replace Nodes
  # Configuration in this section constrains how aggressive Karpenter can be with performing operations
  # like rolling Nodes due to them hitting their maximum lifetime (expiry) or scaling down nodes to reduce cluster cost
  disruption:
    # Describes which types of Nodes Karpenter should consider for consolidation
    # If using 'WhenEmptyOrUnderutilized', Karpenter will consider all nodes for consolidation and attempt to remove or replace Nodes when it discovers that the Node is empty or underutilized and could be changed to reduce cost
    # If using `WhenEmpty`, Karpenter will only consider nodes for consolidation that contain no workload pods
    consolidationPolicy: WhenEmptyOrUnderutilized #WhenEmptyOrUnderutilized | WhenEmpty

    # The amount of time Karpenter should wait to consolidate a node after a pod has been added or removed from the node.
    # You can choose to disable consolidation entirely by setting the string value 'Never' here
    consolidateAfter: 1m # | Never # Added to allow additional control over consolidation aggressiveness

    # Budgets control the speed Karpenter can scale down nodes.
    # Karpenter will respect the minimum of the currently active budgets, and will round up
    # when considering percentages. Duration and Schedule must be set together.
    budgets:
    - nodes: 25%
    # On Weekdays during business hours, don't do any deprovisioning.
    # - schedule: "0 9 * * mon-fri"
      # duration: 8h
      # nodes: "0"  ## 0 means no deprovisioning


  # Resource limits constrain the total size of the pool.
  # Limits prevent Karpenter from creating new instances once the limit is exceeded.
  limits:
    cpu: "16"
    memory: 32Gi

---

apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: recovery
spec:
  role: "Karpenter-microservice-production" # replace with your cluster name
  amiSelectorTerms:
    - alias: "al2023@v20250519"
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "microservice-production" # replace with your cluster name
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "microservice-production" # replace with your cluster name